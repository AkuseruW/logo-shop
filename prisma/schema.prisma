generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String?              @unique
  emailVerified      DateTime?
  password           String
  role               Role                 @default(USER)
  Order              Order[]
  ResetPasswordToken ResetPasswordToken[]
  Review             Review[]
  FavoriteProduct    FavoriteProduct[]
}

model ResetPasswordToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Products {
  id              String            @id @default(cuid())
  name            String
  price           Float
  publish         Boolean
  stock           Int
  cover           String
  cover_id        String
  brand           String
  description     String?
  slug            String            @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  orderItems      OrderItem[]
  images          Image[]
  reviews         Review[]
  category        Categories[]      @relation("CategoryToProduct")
  FavoriteProduct FavoriteProduct[]

  @@map("products")
}

model Image {
  id        String   @id @default(cuid())
  url       String
  productId String
  product   Products @relation(fields: [productId], references: [id])

  @@map("images")
}

model Categories {
  id          String     @id @default(cuid())
  slug        String     @unique
  name        String
  description String
  image       String
  image_id    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  products    Products[] @relation("CategoryToProduct")

  @@map("categories")
}

model Review {
  id        Int      @id @default(autoincrement())
  text      String?
  rating    Float?
  authorId  String?
  productId String
  author    User?    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  product   Products @relation(fields: [productId], references: [id])

  @@map("reviews")
}

model Order {
  id              String           @id @default(cuid())
  userId          String?
  paymentMethod   String?
  taxPrice        Float?
  shippingPrice   Float?
  totalPrice      Float?
  isPaid          Boolean          @default(false)
  paidAt          DateTime?
  isDelivered     Boolean          @default(false)
  deliveredAt     DateTime?
  createdAt       DateTime         @default(now())
  user            User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  orderItems      OrderItem[]
  shippingAddress ShippingAddress?
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  productId String
  orderId   String
  name      String?
  qty       Int?
  price     Float
  image     String?
  order     Order    @relation(fields: [orderId], references: [id])
  product   Products @relation(fields: [productId], references: [id])
}

model ShippingAddress {
  id            Int    @id @default(autoincrement())
  orderId       String @unique
  address       String
  city          String
  postalCode    String
  country       String
  shippingPrice Float
  order         Order  @relation(fields: [orderId], references: [id])

  @@map("shipping_addresses")
}

model FailedLoginAttempt {
  id        String   @id @default(uuid())
  ipAddress String
  timestamp DateTime @default(now())
}

model FavoriteProduct {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  product   Products @relation(fields: [productId], references: [id])

  @@map("favorite_products")
}

enum Role {
  USER
  ADMIN
}
